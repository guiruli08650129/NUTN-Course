#include <stdlib.h>
#include <omp.h>
#include<stdio.h>
#include <time.h>
#include <Windows.h>
#define thread 8
#define SIZE 10

int* setAns(int* a)
{
	srand(time(NULL));
	for (int i = 0; i < SIZE; i++)
	{
		a[i] = rand() % 95+32;
	}
	return a;
}

void guess(int* a, int id)
{

		for (int j = 0; j < SIZE; j++)
		{
			char cc = a[j];
			if (id == a[j])
				printf("Index %d is character %c in thread %d\n", j, cc, omp_get_thread_num());
		}
	
}

int main()
{
	double start, end;
	
	int *a = new int[SIZE];

	setAns(a);
	
	for (int i = 0; i < SIZE; i++)
	{		
		char cc = a[i];
		printf("%c ", cc);
	}
	printf("\n");
	for (int i = 0; i < SIZE; i++)
	{
		printf("%d ", a[i]);
	}
	printf("\n\n");

	start = clock();

#pragma omp parallel for schedule(dynamic) num_threads(thread)
	for (int i = 0; i < 255; i++)
	{
		guess(a, i);
		//printf("Thread %d is doing iteration %d.\n", omp_get_thread_num, i);
	}

	end = clock();
	printf("\nTotal time = %lf.\n",(end - start) / CLOCKS_PER_SEC);


	delete[] a;

	system("pause");
	return 0;

} 